version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  front-tier:
  back-tier:

services:
  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      # - $PWD:/etc/prometheus/
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus_backup.yaml'
    ports:
      - '9090:9090'

    # Fix me
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    container_name: grafana
    restart: always
    environment:
      GF_RENDERING_SERVER_URL: http://localhost:8081/render
      GF_RENDERING_CALLBACK_URL: http://localhost:3000/
      GF_LOG_FILTERS: rendering:debug
  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
      - 8081
######### Combined #########

  webserver:
    build:
      context: ../docker
      dockerfile: Dockerfile_webserver2003
      shm_size: 1gb
    image: solvision/webserver:0.0.1
    shm_size: 2gb
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all

    ### If you already have, you can use it.
    # image: chiehpower/trtis:2003
    ports:
      - "5000:5000"
    container_name: webserver_monitor
    # links:
    #   - tritonserver
    restart: always

  tritonserver:
    image: nvcr.io/nvidia/tritonserver:20.03.1-py3
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./(you path)/model_repository:/models
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    command: tritonserver --model-store=/models
    shm_size: 2gb
    ulimits:
      stack: 67108864
    container_name: trt_serving20031
    restart: always